// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/wrangler/v2/pkg/generated/controllers/rbac/v1 (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/rancher/wrangler/v2/pkg/generated/controllers/rbac/v1"
)

// RBACInterface is a mock of Interface interface.
type RBACInterface struct {
	ctrl     *gomock.Controller
	recorder *RBACInterfaceMockRecorder
}

// RBACInterfaceMockRecorder is the mock recorder for RBACInterface.
type RBACInterfaceMockRecorder struct {
	mock *RBACInterface
}

// NewRBACInterface creates a new mock instance.
func NewRBACInterface(ctrl *gomock.Controller) *RBACInterface {
	mock := &RBACInterface{ctrl: ctrl}
	mock.recorder = &RBACInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RBACInterface) EXPECT() *RBACInterfaceMockRecorder {
	return m.recorder
}

// ClusterRole mocks base method.
func (m *RBACInterface) ClusterRole() v1.ClusterRoleController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRole")
	ret0, _ := ret[0].(v1.ClusterRoleController)
	return ret0
}

// ClusterRole indicates an expected call of ClusterRole.
func (mr *RBACInterfaceMockRecorder) ClusterRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRole", reflect.TypeOf((*RBACInterface)(nil).ClusterRole))
}

// ClusterRoleBinding mocks base method.
func (m *RBACInterface) ClusterRoleBinding() v1.ClusterRoleBindingController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRoleBinding")
	ret0, _ := ret[0].(v1.ClusterRoleBindingController)
	return ret0
}

// ClusterRoleBinding indicates an expected call of ClusterRoleBinding.
func (mr *RBACInterfaceMockRecorder) ClusterRoleBinding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRoleBinding", reflect.TypeOf((*RBACInterface)(nil).ClusterRoleBinding))
}

// Role mocks base method.
func (m *RBACInterface) Role() v1.RoleController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role")
	ret0, _ := ret[0].(v1.RoleController)
	return ret0
}

// Role indicates an expected call of Role.
func (mr *RBACInterfaceMockRecorder) Role() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*RBACInterface)(nil).Role))
}

// RoleBinding mocks base method.
func (m *RBACInterface) RoleBinding() v1.RoleBindingController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBinding")
	ret0, _ := ret[0].(v1.RoleBindingController)
	return ret0
}

// RoleBinding indicates an expected call of RoleBinding.
func (mr *RBACInterfaceMockRecorder) RoleBinding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBinding", reflect.TypeOf((*RBACInterface)(nil).RoleBinding))
}
