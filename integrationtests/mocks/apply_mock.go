// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/wrangler/v2/pkg/apply (interfaces: Apply)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apply "github.com/rancher/wrangler/v2/pkg/apply"
	injectors "github.com/rancher/wrangler/v2/pkg/apply/injectors"
	objectset "github.com/rancher/wrangler/v2/pkg/objectset"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// MockApply is a mock of Apply interface.
type MockApply struct {
	ctrl     *gomock.Controller
	recorder *MockApplyMockRecorder
}

// MockApplyMockRecorder is the mock recorder for MockApply.
type MockApplyMockRecorder struct {
	mock *MockApply
}

// NewMockApply creates a new mock instance.
func NewMockApply(ctrl *gomock.Controller) *MockApply {
	mock := &MockApply{ctrl: ctrl}
	mock.recorder = &MockApplyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApply) EXPECT() *MockApplyMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockApply) Apply(arg0 *objectset.ObjectSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockApplyMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockApply)(nil).Apply), arg0)
}

// ApplyObjects mocks base method.
func (m *MockApply) ApplyObjects(arg0 ...runtime.Object) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyObjects", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyObjects indicates an expected call of ApplyObjects.
func (mr *MockApplyMockRecorder) ApplyObjects(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyObjects", reflect.TypeOf((*MockApply)(nil).ApplyObjects), arg0...)
}

// DryRun mocks base method.
func (m *MockApply) DryRun(arg0 ...runtime.Object) (apply.Plan, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DryRun", varargs...)
	ret0, _ := ret[0].(apply.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DryRun indicates an expected call of DryRun.
func (mr *MockApplyMockRecorder) DryRun(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DryRun", reflect.TypeOf((*MockApply)(nil).DryRun), arg0...)
}

// FindOwner mocks base method.
func (m *MockApply) FindOwner(arg0 runtime.Object) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOwner", arg0)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOwner indicates an expected call of FindOwner.
func (mr *MockApplyMockRecorder) FindOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOwner", reflect.TypeOf((*MockApply)(nil).FindOwner), arg0)
}

// PurgeOrphan mocks base method.
func (m *MockApply) PurgeOrphan(arg0 runtime.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeOrphan", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeOrphan indicates an expected call of PurgeOrphan.
func (mr *MockApplyMockRecorder) PurgeOrphan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeOrphan", reflect.TypeOf((*MockApply)(nil).PurgeOrphan), arg0)
}

// WithCacheTypeFactory mocks base method.
func (m *MockApply) WithCacheTypeFactory(arg0 apply.InformerFactory) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCacheTypeFactory", arg0)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithCacheTypeFactory indicates an expected call of WithCacheTypeFactory.
func (mr *MockApplyMockRecorder) WithCacheTypeFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCacheTypeFactory", reflect.TypeOf((*MockApply)(nil).WithCacheTypeFactory), arg0)
}

// WithCacheTypes mocks base method.
func (m *MockApply) WithCacheTypes(arg0 ...apply.InformerGetter) apply.Apply {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithCacheTypes", varargs...)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithCacheTypes indicates an expected call of WithCacheTypes.
func (mr *MockApplyMockRecorder) WithCacheTypes(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCacheTypes", reflect.TypeOf((*MockApply)(nil).WithCacheTypes), arg0...)
}

// WithContext mocks base method.
func (m *MockApply) WithContext(arg0 context.Context) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockApplyMockRecorder) WithContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockApply)(nil).WithContext), arg0)
}

// WithDefaultNamespace mocks base method.
func (m *MockApply) WithDefaultNamespace(arg0 string) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDefaultNamespace", arg0)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithDefaultNamespace indicates an expected call of WithDefaultNamespace.
func (mr *MockApplyMockRecorder) WithDefaultNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDefaultNamespace", reflect.TypeOf((*MockApply)(nil).WithDefaultNamespace), arg0)
}

// WithDiffPatch mocks base method.
func (m *MockApply) WithDiffPatch(arg0 schema.GroupVersionKind, arg1, arg2 string, arg3 []byte) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDiffPatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithDiffPatch indicates an expected call of WithDiffPatch.
func (mr *MockApplyMockRecorder) WithDiffPatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDiffPatch", reflect.TypeOf((*MockApply)(nil).WithDiffPatch), arg0, arg1, arg2, arg3)
}

// WithDynamicLookup mocks base method.
func (m *MockApply) WithDynamicLookup() apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDynamicLookup")
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithDynamicLookup indicates an expected call of WithDynamicLookup.
func (mr *MockApplyMockRecorder) WithDynamicLookup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDynamicLookup", reflect.TypeOf((*MockApply)(nil).WithDynamicLookup))
}

// WithGVK mocks base method.
func (m *MockApply) WithGVK(arg0 ...schema.GroupVersionKind) apply.Apply {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithGVK", varargs...)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithGVK indicates an expected call of WithGVK.
func (mr *MockApplyMockRecorder) WithGVK(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGVK", reflect.TypeOf((*MockApply)(nil).WithGVK), arg0...)
}

// WithIgnorePreviousApplied mocks base method.
func (m *MockApply) WithIgnorePreviousApplied() apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIgnorePreviousApplied")
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithIgnorePreviousApplied indicates an expected call of WithIgnorePreviousApplied.
func (mr *MockApplyMockRecorder) WithIgnorePreviousApplied() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIgnorePreviousApplied", reflect.TypeOf((*MockApply)(nil).WithIgnorePreviousApplied))
}

// WithInjector mocks base method.
func (m *MockApply) WithInjector(arg0 ...injectors.ConfigInjector) apply.Apply {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithInjector", varargs...)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithInjector indicates an expected call of WithInjector.
func (mr *MockApplyMockRecorder) WithInjector(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInjector", reflect.TypeOf((*MockApply)(nil).WithInjector), arg0...)
}

// WithInjectorName mocks base method.
func (m *MockApply) WithInjectorName(arg0 ...string) apply.Apply {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithInjectorName", varargs...)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithInjectorName indicates an expected call of WithInjectorName.
func (mr *MockApplyMockRecorder) WithInjectorName(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithInjectorName", reflect.TypeOf((*MockApply)(nil).WithInjectorName), arg0...)
}

// WithListerNamespace mocks base method.
func (m *MockApply) WithListerNamespace(arg0 string) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithListerNamespace", arg0)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithListerNamespace indicates an expected call of WithListerNamespace.
func (mr *MockApplyMockRecorder) WithListerNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithListerNamespace", reflect.TypeOf((*MockApply)(nil).WithListerNamespace), arg0)
}

// WithNoDelete mocks base method.
func (m *MockApply) WithNoDelete() apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithNoDelete")
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithNoDelete indicates an expected call of WithNoDelete.
func (mr *MockApplyMockRecorder) WithNoDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithNoDelete", reflect.TypeOf((*MockApply)(nil).WithNoDelete))
}

// WithNoDeleteGVK mocks base method.
func (m *MockApply) WithNoDeleteGVK(arg0 ...schema.GroupVersionKind) apply.Apply {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithNoDeleteGVK", varargs...)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithNoDeleteGVK indicates an expected call of WithNoDeleteGVK.
func (mr *MockApplyMockRecorder) WithNoDeleteGVK(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithNoDeleteGVK", reflect.TypeOf((*MockApply)(nil).WithNoDeleteGVK), arg0...)
}

// WithOwner mocks base method.
func (m *MockApply) WithOwner(arg0 runtime.Object) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOwner", arg0)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithOwner indicates an expected call of WithOwner.
func (mr *MockApplyMockRecorder) WithOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOwner", reflect.TypeOf((*MockApply)(nil).WithOwner), arg0)
}

// WithOwnerKey mocks base method.
func (m *MockApply) WithOwnerKey(arg0 string, arg1 schema.GroupVersionKind) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOwnerKey", arg0, arg1)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithOwnerKey indicates an expected call of WithOwnerKey.
func (mr *MockApplyMockRecorder) WithOwnerKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOwnerKey", reflect.TypeOf((*MockApply)(nil).WithOwnerKey), arg0, arg1)
}

// WithPatcher mocks base method.
func (m *MockApply) WithPatcher(arg0 schema.GroupVersionKind, arg1 apply.Patcher) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPatcher", arg0, arg1)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithPatcher indicates an expected call of WithPatcher.
func (mr *MockApplyMockRecorder) WithPatcher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPatcher", reflect.TypeOf((*MockApply)(nil).WithPatcher), arg0, arg1)
}

// WithRateLimiting mocks base method.
func (m *MockApply) WithRateLimiting(arg0 float32) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRateLimiting", arg0)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithRateLimiting indicates an expected call of WithRateLimiting.
func (mr *MockApplyMockRecorder) WithRateLimiting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRateLimiting", reflect.TypeOf((*MockApply)(nil).WithRateLimiting), arg0)
}

// WithReconciler mocks base method.
func (m *MockApply) WithReconciler(arg0 schema.GroupVersionKind, arg1 apply.Reconciler) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithReconciler", arg0, arg1)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithReconciler indicates an expected call of WithReconciler.
func (mr *MockApplyMockRecorder) WithReconciler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithReconciler", reflect.TypeOf((*MockApply)(nil).WithReconciler), arg0, arg1)
}

// WithRestrictClusterScoped mocks base method.
func (m *MockApply) WithRestrictClusterScoped() apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRestrictClusterScoped")
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithRestrictClusterScoped indicates an expected call of WithRestrictClusterScoped.
func (mr *MockApplyMockRecorder) WithRestrictClusterScoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRestrictClusterScoped", reflect.TypeOf((*MockApply)(nil).WithRestrictClusterScoped))
}

// WithSetID mocks base method.
func (m *MockApply) WithSetID(arg0 string) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSetID", arg0)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithSetID indicates an expected call of WithSetID.
func (mr *MockApplyMockRecorder) WithSetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSetID", reflect.TypeOf((*MockApply)(nil).WithSetID), arg0)
}

// WithSetOwnerReference mocks base method.
func (m *MockApply) WithSetOwnerReference(arg0, arg1 bool) apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSetOwnerReference", arg0, arg1)
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithSetOwnerReference indicates an expected call of WithSetOwnerReference.
func (mr *MockApplyMockRecorder) WithSetOwnerReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSetOwnerReference", reflect.TypeOf((*MockApply)(nil).WithSetOwnerReference), arg0, arg1)
}

// WithStrictCaching mocks base method.
func (m *MockApply) WithStrictCaching() apply.Apply {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStrictCaching")
	ret0, _ := ret[0].(apply.Apply)
	return ret0
}

// WithStrictCaching indicates an expected call of WithStrictCaching.
func (mr *MockApplyMockRecorder) WithStrictCaching() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStrictCaching", reflect.TypeOf((*MockApply)(nil).WithStrictCaching))
}
